"""
Django settings for itool project.

Generated by 'django-admin startproject' using Django 2.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&$3x006+w7s5(x5i=qh!96vczx+$40^=o+pwgak*cja*f=rdz#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'videoClipping',
    'djcelery',
    'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'videoClipping.authmiddleware.AuthMiddleware'
]

ROOT_URLCONF = 'itool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'itool.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_itool',
        'USER': 'qiaofeng',
        'PASSWOROD': os.getenv('MYSQL_PWD'),
        'HOST': '150.158.123.234',
        'PORT': 3306
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

PER_PAGE = 20

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STACTICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/upload')

# 配置缓存-redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://root:1025@127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIEND_CLASS': 'django_reids.client.DefaultClient'
        }
    },
    'users': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://root:1025@127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIEND_CLASS': 'django_reids.client.DefaultClient'
        }
    }
}

import djcelery

djcelery.setup_loader()
BROKER_URL = 'redis://root:1025@127.0.0.1:6379/1'  # 指定任务队列
CELERY_CONCURRENCY = 2  # 指定并发数量
CELERY_RESULT_BACKEND = 'redis://root:1025@127.0.0.1:6379/2'  # 结果存放位置
CELERY_TASK_SERIALIZER = 'json'  # 任务序列化和反序列化
CELERY_RESULT_SERIALIZER = 'json'  # 结果序列化
CELERYBEAT_SCHEDULE = {
    'celery_test': {
        'task': 'app.tasks.test_celery',
        'schedule': timedelta(seconds=3),  # 每隔3秒执行一次
        'args': (16, 16)
    },
}

# log 配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
    },
    'filters': {  # 过滤条件
        # 要求debug是False才记录
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },

    },
    'handlers': {
        'debug': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "log", 'debug.log'),  # 文件路径
            'maxBytes': 1024 * 1024 * 5,  # 5兆的数据
            'backupCount': 5,  # 允许有5这样的文件
            'formatter': 'standard',  # 格式
        },
    },
    'loggers': {
        'videoClipping': {
            'handlers': ['debug'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}
